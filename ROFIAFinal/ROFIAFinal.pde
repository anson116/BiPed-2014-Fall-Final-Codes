

//    Poser action playback
//      This program was generated by Project Biped Poser to playback a specific action.
//    Use it as the starting point for your projects!
//
//    Copyright (C) 2012  Jonathan Dowdall, Project Biped (www.projectbiped.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include <Servo.h> 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int maximumServoShieldPosition = 2200;   // the maximum pulse duration for the servo shield (2ms pulse)
const int minimumServoShieldPosition = 800;   // the minimum pulse duration for the servo shield (1ms pulse)
const int numberOfServos             = 12;      // the number of servos
const int numberOfJoints             = 12;
const int numberOfFrames             = 126;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Action
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //  The Action class collects information necessary to perform a sequence of movements.     
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Members
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  public:
    int             duration;      // Total duration of the action in milliseconds
    float           playbackTime;  // The playback time in milliseconds.
    unsigned long   lastTime;      // The playback time in milliseconds.
    int*            frames;        // Pointer to a two dimensional array containing the individual frames
    float           playbackSpeed; // The speed at which the action is played back (1 is realtime, 0.5 is half speed, 2.0 is twice realtime)

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  //Methods
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Action(int setDuration, void* setFrames)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
    frames            = (int*)setFrames;
    duration          = setDuration;
    playbackTime      = 0;
    playbackSpeed     = 1.0;
    lastTime          = 0;
  }  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void Update()
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {  
     // Get the current time.
     unsigned long currentTime = millis(); 
   
     // Update the playback time.
     playbackTime += (playbackSpeed * (float)(currentTime - lastTime));
     
     // Loop if the playback time is past the end of the action.
     if(playbackTime > duration)
       playbackTime = playbackTime - duration;
     
     // Remember the time.
     lastTime = currentTime;     
  }

  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  void GetCurrentFrame(int* frame)
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  {
      //update each servo
      int* sourceFrame = frames + ((int)playbackTime/20)*numberOfJoints;
      for (int joint = 0; joint < numberOfJoints; joint++)
        frame[joint] = sourceFrame[joint];    
  }

};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action Frames
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Joints positions are in degrees * 100 (home position is 0 degrees)
/////////////////////////////////////////////
//JOINT INDEXES
//
//RIGHT LEG JOINTS
// 0 Right Ankle (roll)
// 1 Right Lower Leg 
// 2 Right Knee 
// 3 Right Middle Leg 
// 4 Right Upper Leg 
// 5 Right Hip (roll)
//LEFT LEG JOINTS
// 6 Left Ankle (roll)
// 7 Left Lower Leg 
// 8 Left Knee 
// 9 Left Middle Leg 
// 10 Left Upper Leg 
// 11 Left Hip (roll)
/////////////////////////////////////////////
int servoPins[numberOfServos] = {22, 24, 26, 28, 30, 32, 38, 40, 42, 44, 46, 48};  // the pin for each servo 
int frames[numberOfFrames][numberOfJoints] = {
                      {  707, -2990,     0,     0, -3100,  2000, -1800,     0,   800,     0,     0, -2300 },
                      { 1122, -2983,     0,     0, -3100,  2045, -1845,     0,   800,     0,     0, -2300 },
                      { 1537, -2975,     0,     0, -3100,  2091, -1891,     0,   800,     0,     0, -2300 },
                      { 1951, -2968,     0,     0, -3100,  2137, -1937,     0,   800,     0,     0, -2300 },
                      { 2366, -2961,     0,     0, -3100,  2183, -1983,     0,   800,     0,     0, -2300 },
                      { 2781, -2954,     0,     0, -3100,  2229, -2029,     0,   800,     0,     0, -2300 },
                      { 3196, -2946,     0,     0, -3100,  2275, -2075,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2166,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2298,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2431,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2563,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2696,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2829,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2961,     0,   800,     0,     0, -2300 },
                      { 3417, -2620,     0,     0, -3100,  2412, -3056,     0,   800,     0,     0, -2300 },
                      { 3422, -2160,     0,     0, -3100,  2572, -3136,     0,   800,     0,     0, -2300 },
                      { 3426, -1699,     0,     0, -3100,  2732, -3215,     0,   800,     0,     0, -2300 },
                      { 3431, -1239,     0,     0, -3100,  2892, -3296,     0,   800,     0,     0, -2300 },
                      { 3436,  -778,     0,     0, -3100,  3052, -3376,     0,   800,     0,     0, -2300 },
                      { 3274, -1064,  -461,   358, -2757,  3084, -3384,    31,  1158,   461,   151, -2236 },
                      { 3040, -1670, -1121,   869, -2268,  3061, -3361,    77,  1669,  1121,   367, -2145 },
                      { 2806, -2275, -1780,  1381, -1779,  3038, -3338,   122,  2181,  1780,   583, -2054 },
                      { 2573, -2881, -2440,  1893, -1290,  3015, -3315,   168,  2693,  2440,   799, -1963 },
                      { 2339, -3486, -3099,  2405,  -801,  2993, -3293,   213,  3205,  3099,  1015, -1872 },
                      { 2105, -4092, -3759,  2916,  -312,  2970, -3270,   259,  3716,  3759,  1231, -1781 },
                      { 1871, -4698, -4418,  3428,   176,  2947, -3247,   304,  4228,  4418,  1447, -1690 },
                      { 1637, -5303, -5078,  3940,   665,  2924, -3224,   350,  4740,  5078,  1663, -1599 },
                      { 1403, -5909, -5738,  4451,  1154,  2902, -3202,   395,  5251,  5738,  1879, -1508 },
                      { 1338, -5365, -5359,  4365,  1569,  2882, -3218,   436,  5030,  5548,  1729, -1607 },
                      { 1290, -4697, -4869,  4215,  1979,  2862, -3238,   476,  4730,  5268,  1539, -1728 },
                      { 1242, -4029, -4379,  4065,  2389,  2842, -3258,   516,  4430,  4988,  1349, -1848 },
                      { 1194, -3361, -3889,  3915,  2799,  2822, -3278,   556,  4130,  4708,  1159, -1968 },
                      { 1146, -2693, -3399,  3765,  3209,  2802, -3297,   596,  3829,  4428,   969, -2088 },
                      { 1098, -2026, -2909,  3615,  3619,  2782, -3318,   636,  3529,  4148,   779, -2208 },
                      { 1050, -1358, -2419,  3465,  4029,  2762, -3338,   676,  3229,  3868,   589, -2328 },
                      { 1002,  -690, -1929,  3315,  4439,  2742, -3358,   716,  2929,  3587,   398, -2448 },
                      {  954,   -22, -1439,  3165,  4849,  2722, -3378,   756,  2630,  3308,   209, -2568 },
                      {  906,   645,  -949,  3015,  5259,  2702, -3397,   796,  2330,  3028,    19, -2688 },
                      {  940,   711,  -900,  3000,  5300,  2700, -3292,   800,  2300,  3000,    81, -2700 },
                      {  983,   711,  -900,  3000,  5300,  2700, -3172,   800,  2300,  3000,   171, -2700 },
                      { 1025,   711,  -900,  3000,  5300,  2700, -3052,   800,  2300,  3000,   261, -2700 },
                      { 1068,   711,  -900,  3000,  5300,  2700, -2932,   800,  2300,  3000,   351, -2700 },
                      { 1110,   711,  -900,  3000,  5300,  2700, -2812,   800,  2300,  3000,   441, -2700 },
                      { 1153,   711,  -900,  3000,  5300,  2700, -2692,   800,  2300,  3000,   531, -2700 },
                      { 1196,   711,  -900,  3000,  5300,  2700, -2572,   800,  2300,  3000,   620, -2700 },
                      { 1238,   711,  -900,  3000,  5300,  2700, -2452,   800,  2300,  3000,   711, -2700 },
                      { 1281,   711,  -900,  3000,  5300,  2700, -2332,   800,  2300,  3000,   801, -2700 },
                      { 1324,   711,  -900,  3000,  5300,  2700, -2212,   800,  2300,  3000,   891, -2700 },
                      { 1180,   671, -1206,  2604,  5030,  2250, -2092,   620,  2138,  2460,   396, -2556 },
                      { 1016,   627, -1546,  2164,  4730,  1750, -1972,   420,  1957,  1860,  -164, -2396 },
                      {  851,   582, -1886,  1724,  4430,  1250, -1852,   220,  1778,  1260,  -723, -2236 },
                      {  687,   538, -2226,  1284,  4130,   750, -1732,    19,  1598,   659, -1284, -2076 },
                      {  523,   494, -2566,   844,  3829,   250, -1612,  -180,  1418,    60, -1843, -1916 },
                      {  306,   528, -2275,   713,  3388,   -70, -1405,  -492,  1248,     0, -2029, -1477 },
                      {   83,   572, -1914,   617,  2931,  -371, -1188,  -817,  1080,     0, -2174, -1008 },
                      { -139,   616, -1553,   520,  2474,  -671,  -972, -1141,   911,     0, -2318,  -539 },
                      { -361,   660, -1192,   424,  2017,  -972,  -755, -1466,   743,     0, -2462,   -70 },
                      { -584,   703,  -831,   328,  1560, -1273,  -539, -1791,   574,     0, -2607,   398 },
                      { -807,   747,  -471,   232,  1103, -1574,  -322, -2115,   406,     0, -2751,   867 },
                      {-1030,   791,  -110,   136,   646, -1874,  -106, -2440,   238,     0, -2895,  1336 },
                      {-1252,   834,   250,    39,   189, -2175,   110, -2765,    69,     0, -3040,  1805 },
                      {-1418,   774,   436,     0,     0, -2300,   494, -2900,     0,     0, -3100,  2027 },
                      {-1541,   643,   498,     0,     0, -2300,   984, -2900,     0,     0, -3100,  2073 },
                      {-1663,   513,   559,     0,     0, -2300,  1475, -2900,     0,     0, -3100,  2119 },
                      {-1786,   382,   620,     0,     0, -2300,  1965, -2900,     0,     0, -3100,  2165 },
                      {-1908,   251,   682,     0,     0, -2300,  2456, -2900,     0,     0, -3100,  2211 },
                      {-2031,   120,   743,     0,     0, -2300,  2946, -2900,     0,     0, -3100,  2257 },
                      {-2158,     0,   800,     0,     0, -2300,  3400, -2900,     0,     0, -3100,  2300 },
                      {-2293,     0,   800,     0,     0, -2300,  3400, -2900,     0,     0, -3100,  2300 },
                      {-2428,     0,   800,     0,     0, -2300,  3400, -2900,     0,     0, -3100,  2300 },
                      {-2564,     0,   800,     0,     0, -2300,  3400, -2900,     0,     0, -3100,  2300 },
                      {-2699,     0,   800,     0,     0, -2300,  3400, -2900,     0,     0, -3100,  2300 },
                      {-2834,     0,   800,     0,     0, -2300,  3400, -2900,     0,     0, -3100,  2300 },
                      {-2969,     0,   800,     0,     0, -2300,  3400, -2900,     0,     0, -3100,  2300 },
                      {-3075,     0,   800,     0,     0, -2300,  3400, -2821,     0,     0, -3100,  2300 },
                      {-3117,     0,   800,     0,     0, -2300,  3400, -2559,     0,     0, -3100,  2300 },
                      {-3159,     0,   800,     0,     0, -2300,  3400, -2298,     0,     0, -3100,  2300 },
                      {-3202,     0,   800,     0,     0, -2300,  3400, -2036,     0,     0, -3100,  2300 },
                      {-3244,     0,   800,     0,     0, -2300,  3400, -1775,     0,     0, -3100,  2300 },
                      {-3286,     0,   800,     0,     0, -2300,  3400, -1513,     0,     0, -3100,  2300 },
                      {-3328,     0,   800,     0,     0, -2300,  3400, -1252,     0,     0, -3100,  2300 },
                      {-3370,     0,   800,     0,     0, -2300,  3400,  -990,     0,     0, -3100,  2300 },
                      {-3412,     0,   800,     0,     0, -2300,  3400,  -729,     0,     0, -3100,  2300 },
                      {-3410,    46,  1250,   580,   190, -2220,  3190, -1130,  -580,   450, -2670,  2360 },
                      {-3363,   138,  2150,  1739,   570, -2060,  2770, -2190, -1739,  1350, -1810,  2480 },
                      {-3316,   230,  3050,  2900,   950, -1900,  2350, -3250, -2900,  2250,  -950,  2600 },
                      {-3270,   323,  3950,  4059,  1330, -1739,  1930, -4309, -4059,  3149,   -90,  2720 },
                      {-3223,   415,  4850,  5220,  1710, -1580,  1509, -5370, -5220,  4050,   770,  2840 },
                      {-3210,   481,  5150,  5660,  1850, -1560,  1350, -5620, -5555,  4425,  1405,  2890 },
                      {-3229,   521,  4850,  5380,  1750, -1680,  1450, -5060, -5065,  4275,  1814,  2870 },
                      {-3250,   560,  4550,  5100,  1650, -1800,  1550, -4500, -4575,  4125,  2225,  2850 },
                      {-3270,   600,  4250,  4820,  1550, -1920,  1650, -3940, -4085,  3975,  2635,  2830 },
                      {-3290,   639,  3950,  4540,  1450, -2039,  1750, -3379, -3595,  3825,  3045,  2810 },
                      {-3310,   679,  3650,  4259,  1350, -2160,  1850, -2819, -3104,  3675,  3454,  2790 },
                      {-3329,   719,  3350,  3979,  1250, -2280,  1950, -2260, -2615,  3525,  3865,  2770 },
                      {-3350,   758,  3050,  3700,  1150, -2400,  2050, -1700, -2125,  3375,  4275,  2750 },
                      {-3370,   798,  2750,  3420,  1050, -2520,  2150, -1139, -1635,  3225,  4685,  2730 },
                      {-3390,   838,  2450,  3140,   950, -2640,  2250,  -580, -1145,  3075,  5095,  2710 },
                      {-3349,   749,  2209,  2849,   799, -2735,  2261,  -306, -1010,  2849,  5320,  2669 },
                      {-3249,   532,  2028,  2547,   598, -2805,  2183,  -319, -1231,  2547,  5360,  2609 },
                      {-3148,   315,  1847,  2246,   397, -2875,  2105,  -332, -1452,  2246,  5400,  2549 },
                      {-3048,    98,  1666,  1944,   196, -2946,  2027,  -345, -1673,  1944,  5440,  2488 },
                      {-2947,  -118,  1485,  1643,    -4, -3016,  1949,  -358, -1894,  1643,  5480,  2428 },
                      {-2847,  -334,  1305,  1341,  -205, -3086,  1871,  -371, -2116,  1341,  5521,  2368 },
                      {-2746,  -551,  1124,  1040,  -406, -3157,  1793,  -384, -2337,  1040,  5561,  2308 },
                      {-2646,  -768,   943,   738,  -607, -3227,  1715,  -397, -2558,   738,  5601,  2247 },
                      {-2545,  -985,   762,   437,  -808, -3297,  1638,  -410, -2779,   437,  5641,  2187 },
                      {-2445, -1202,   581,   135, -1009, -3368,  1560,  -423, -3000,   135,  5681,  2127 },
                      {-2360, -1243,   549,     0, -1144, -3317,  1468,  -383, -3072,    44,  5595,  1995 },
                      {-2288, -1141,   639,     0, -1224, -3167,  1366,  -300, -3022,   124,  5405,  1805 },
                      {-2217, -1038,   729,     0, -1304, -3017,  1263,  -218, -2972,   204,  5215,  1615 },
                      {-2145,  -935,   819,     0, -1384, -2867,  1161,  -135, -2922,   284,  5025,  1425 },
                      {-2073,  -833,   909,     0, -1464, -2717,  1058,   -52, -2872,   364,  4835,  1235 },
                      {-2002,  -730,   999,     0, -1544, -2567,   956,    30, -2822,   444,  4645,  1045 },
                      {-1930,  -628,  1089,     0, -1624, -2417,   853,   113, -2772,   524,  4455,   855 },
                      {-1858,  -525,  1179,     0, -1704, -2267,   751,   196, -2722,   604,  4265,   665 },
                      {-1787,  -423,  1269,     0, -1784, -2117,   648,   279, -2672,   684,  4075,   475 },
                      {-1715,  -320,  1359,     0, -1864, -1967,   546,   362, -2622,   764,  3885,   285 },
                      {-1525,  -454,  1307,     0, -1979, -1642,   347,   373, -2375,   747,  3548,    34 },
                      {-1237,  -780,  1139,     0, -2123, -1172,    71,   325, -1966,   650,  3091,  -266 },
                      { -950, -1107,   970,     0, -2268,  -703,  -205,   277, -1557,   554,  2634,  -566 },
                      { -662, -1434,   802,     0, -2412,  -234,  -482,   229, -1148,   458,  2177,  -867 },
                      { -374, -1760,   633,     0, -2556,   234,  -758,   181,  -739,   362,  1720, -1168 },
                      {  -87, -2087,   465,     0, -2701,   703, -1035,   132,  -330,   265,  1263, -1468 },
                      {  200, -2414,   297,     0, -2845,  1172, -1311,    84,    78,   169,   806, -1769 },
                      {  488, -2740,   128,     0, -2989,  1641, -1588,    36,   487,    73,   349, -2070 }
};


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Actions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Action myAction(numberOfFrames * 20 , frames); //the action
Action* currentAction;                //pointer to the current action

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Servo servos[numberOfServos];  // create servo object to control a servo 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //set the initial action
  currentAction = &myAction;
  
  //wait for a second to begin (keeps the communication line open in case a new program is being downloaded)
  delay(1000);    
  
  //start up the communication
  Serial.begin(9600);  
  
  //initialize the servos
  initializeServos();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //this is the main update loop for the microcontroller
  
  //update the current action
  UpdateAction();
  
  //get the frame from the current action  
  int frame[numberOfServos];
  currentAction->GetCurrentFrame(frame);
  
  //set the servo positions for this frame number
  SetServoPositions(frame);        
  
  // Add a little delay.
  delay(2);                  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void UpdateAction()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //check to see if the robot is walking
  if(currentAction == &myAction)
  {
    // TODO (you) : add some logic for your action here!
    
    // move to the next frame of the action
    currentAction->Update();    
  }  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initializeServos()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Assign the correct pin to each servo.
  for(int s = 0; s < numberOfServos; s++)
    servos[s].attach(servoPins[s]);  
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void SetServoPositions(int* frame)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //update each servo
  for (int servo = 0; servo < numberOfServos; servo++)
  {   
      // each servo position is sent as a 2 byte value (high byte, low byte) integer (from -32,768 to 32,767)
      // this number is encoding the angle of the servo. The number is 100 * the servo angle.  This allows for the
      // storage of 2 significant digits(i.e. the value can be from -60.00 to 60.00 and every value in between).
      // Also remember that the servos have a range of 120 degrees. The angle is written in positions
      // which range from a minimum of 800 (-60 degrees) and go to a maximum of 2200 (60 degrees)
          
      int value = frame[servo];      
      
      // flip for the left leg.
      if(servo >= numberOfServos/2)
        value = map(value, -6000,6000,6000,-6000);
      
      servos[servo].write(map(value, -6000,6000,800,2200));              // tell servo to go to position in variable 'pos'       

  }
}
