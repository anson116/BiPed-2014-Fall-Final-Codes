#include <Servo.h> 
#include <SPI.h>
#include <Adb.h>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Define
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#define FALSE 0
#define TRUE  1
// Commands to Numeric Value Mapping
//               Data[0] =   CMD TYPE | Qual
//                        bit  7654321   0      
#define MOVE         0x01   // 0000000   1        
#define CAMERA_MOVE  0x02   // 0000001   0                  
#define CAMERA_HOME  0x04   // 0000010   0
#define LED_1        0x40   // 0000000   1 
#define LED_2        0x41   // 0000000   1 
#define LED_3        0x42   // 0000000   1 
#define LEDcount  3


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int numberOfServos             = 12;    // the number of servos
const int numberOfJoints             = 12;
const int numberOfFramesForward      = 121;
const int playbackDelayForward       = 10;    // Delay between the forward walk frames to achieve a stable speed
const int numberOfFramesRight        = 24;    // Delay between the right turn frames to achieve a stable speed
const int playbackDelayRight         = 25;
const int numberOfFramesNeutral      = 5;     // Frames for moving to home position
const int playbackDelayNeutral       = 20;    // Delay between the nuetral frames to achieve a stable speed
const int ultrasonicConstant         = 58;    // Calculation for the distance detected by the ultrasonic sensor
                                              // Speed of sound is about 340 m/s -> 29 microseconds/cm, divide
                                              // the time taken for the ultrasonic sensor to detect by 2 to get
                                              // the time taken by the pulse to reach the object, then divide by
                                              // the ultrasonic constant to get the distance in centimeters.
const int pingPin                    = 4;     // Ultrasonic sensor pin

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action Frames
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Joints positions are in degrees * 100 (home position is 0 degrees)
/////////////////////////////////////////////
//JOINT INDEXES
//
//RIGHT LEG JOINTS
// 0 Right Ankle (roll)
// 1 Right Lower Leg 
// 2 Right Knee 
// 3 Right Middle Leg 
// 4 Right Upper Leg 
// 5 Right Hip (roll)
//LEFT LEG JOINTS
// 6 Left Ankle (roll)
// 7 Left Lower Leg 
// 8 Left Knee 
// 9 Left Middle Leg 
// 10 Left Upper Leg 
// 11 Left Hip (roll)
/////////////////////////////////////////////
int servoPins[numberOfServos] = {22, 24, 26, 28, 30, 32, 38, 40, 42, 44, 46, 48};  // the pin for each servo 

int framesForward[numberOfFramesForward][numberOfJoints] = {
                      {  252, -2393,     0,     0, -3100,  3500, -1300,     0,   800,     0,     0, -2300 },
                      {  432, -2346,     0,     0, -3100,  3316, -1468,     0,   800,     0,     0, -2300 },
                      {  611, -2300,     0,     0, -3100,  3132, -1637,     0,   800,     0,     0, -2300 },
                      {  790, -2253,     0,     0, -3100,  2948, -1805,     0,   800,     0,     0, -2300 },
                      {  970, -2207,     0,     0, -3100,  2764, -1974,     0,   800,     0,     0, -2300 },
                      { 1149, -2160,     0,     0, -3100,  2580, -2142,     0,   800,     0,     0, -2300 },
                      { 1329, -2114,     0,     0, -3100,  2396, -2311,     0,   800,     0,     0, -2300 },
                      { 1443, -1983,     0,     0, -3100,  2358, -2414,     0,   800,     0,     0, -2300 },
                      { 1485, -1769,     0,     0, -3100,  2476, -2444,     0,   800,     0,     0, -2300 },
                      { 1526, -1556,     0,     0, -3100,  2594, -2473,     0,   800,     0,     0, -2300 },
                      { 1567, -1342,     0,     0, -3100,  2712, -2503,     0,   800,     0,     0, -2300 },
                      { 1609, -1129,     0,     0, -3100,  2830, -2532,     0,   800,     0,     0, -2300 },
                      { 1650,  -915,     0,     0, -3100,  2948, -2562,     0,   800,     0,     0, -2300 },
                      { 1691,  -702,     0,     0, -3100,  3065, -2591,     0,   800,     0,     0, -2300 },
                      { 1755,  -640,     0,     0, -3100,  3155, -2623,     0,   800,     0,     0, -2300 },
                      { 1830,  -640,     0,     0, -3100,  3235, -2657,     0,   800,     0,     0, -2300 },
                      { 1904,  -640,     0,     0, -3100,  3314, -2692,     0,   800,     0,     0, -2300 },
                      { 1978,  -640,     0,     0, -3100,  3394, -2726,     0,   800,     0,     0, -2300 },
                      { 2053,  -640,     0,     0, -3100,  3474, -2760,     0,   800,     0,     0, -2300 },
                      { 2127,  -640,     0,     0, -3100,  3553, -2794,     0,   800,     0,     0, -2300 },
                      { 2201,  -640,     0,     0, -3100,  3633, -2828,     0,   800,     0,     0, -2300 },
                      { 2276,  -640,     0,     0, -3100,  3712, -2862,     0,   800,     0,     0, -2300 },
                      { 2350,  -640,     0,     0, -3100,  3792, -2896,     0,   800,     0,     0, -2300 },
                      { 2293,  -633,   -81,   270, -2344,  3701, -2855,    90,   935,   270,    81, -2336 },
                      { 2221,  -626,  -171,   570, -1503,  3590, -2805,   190,  1085,   570,   171, -2376 },
                      { 2149,  -619,  -261,   870,  -663,  3481, -2755,   290,  1235,   870,   261, -2416 },
                      { 2078,  -612,  -350,  1169,   175,  3371, -2705,   389,  1384,  1169,   350, -2456 },
                      { 2006,  -604,  -440,  1469,  1015,  3261, -2655,   489,  1534,  1469,   440, -2496 },
                      { 1934,  -597,  -530,  1769,  1855,  3151, -2605,   589,  1684,  1769,   530, -2536 },
                      { 1863,  -590,  -620,  2070,  2695,  3041, -2555,   690,  1835,  2070,   620, -2576 },
                      { 1791,  -583,  -711,  2370,  3536,  2931, -2505,   790,  1985,  2370,   711, -2616 },
                      { 1720,  -575,  -801,  2670,  4376,  2821, -2455,   890,  2135,  2670,   801, -2656 },
                      { 1648,  -568,  -891,  2970,  5216,  2711, -2405,   990,  2285,  2970,   891, -2696 },
                      { 1661,  -573,  -906,  3001,  5307,  2707, -2330,   879,  2304,  3005,   906, -2704 },
                      { 1684,  -579,  -912,  3002,  5316,  2715, -2254,   745,  2309,  3010,   914, -2708 },
                      { 1706,  -585,  -919,  3004,  5324,  2723, -2177,   611,  2314,  3016,   921, -2713 },
                      { 1729,  -591,  -926,  3005,  5333,  2732, -2100,   476,  2318,  3021,   929, -2717 },
                      { 1751,  -597,  -932,  3006,  5341,  2740, -2023,   342,  2323,  3027,   937, -2722 },
                      { 1774,  -603,  -939,  3008,  5350,  2748, -1947,   208,  2328,  3033,   944, -2727 },
                      { 1796,  -609,  -946,  3009,  5358,  2756, -1870,    74,  2333,  3038,   952, -2731 },
                      { 1819,  -615,  -953,  3011,  5367,  2765, -1793,   -59,  2338,  3044,   959, -2736 },
                      { 1841,  -621,  -959,  3012,  5375,  2773, -1716,  -193,  2343,  3050,   967, -2740 },
                      { 1864,  -628,  -966,  3014,  5383,  2781, -1639,  -327,  2347,  3055,   975, -2745 },
                      { 1708,  -617, -1114,  2814,  5242,  2550, -1613,  -263,  2262,  2781,   717, -2651 },
                      { 1532,  -605, -1277,  2593,  5083,  2291, -1593,  -177,  2168,  2475,   429, -2547 },
                      { 1356,  -592, -1440,  2372,  4925,  2033, -1572,   -90,  2073,  2170,   141, -2442 },
                      { 1180,  -580, -1604,  2150,  4766,  1775, -1552,    -4,  1978,  1864,  -145, -2338 },
                      { 1005,  -568, -1767,  1929,  4608,  1517, -1531,    81,  1883,  1558,  -433, -2233 },
                      {  829,  -556, -1930,  1707,  4449,  1258, -1511,   167,  1788,  1253,  -720, -2129 },
                      {  653,  -543, -2093,  1486,  4291,  1000, -1490,   254,  1693,   947, -1008, -2024 },
                      {  477,  -531, -2257,  1264,  4132,   742, -1470,   340,  1599,   641, -1296, -1920 },
                      {  301,  -519, -2420,  1043,  3974,   484, -1450,   426,  1504,   336, -1583, -1815 },
                      {  126,  -506, -2583,   822,  3815,   225, -1429,   513,  1409,    30, -1871, -1711 },
                      {  -44,  -450, -2231,   713,  3388,   -70, -1251,   206,  1248,     0, -2029, -1137 },
                      { -214,  -390, -1823,   617,  2931,  -371, -1055,  -144,  1080,     0, -2174,  -512 },
                      { -383,  -329, -1414,   520,  2474,  -671,  -859,  -494,   911,     0, -2318,   113 },
                      { -553,  -268, -1005,   424,  2017,  -972,  -664,  -845,   743,     0, -2462,   738 },
                      { -723,  -207,  -596,   328,  1560, -1273,  -468, -1196,   574,     0, -2607,  1364 },
                      { -893,  -146,  -187,   232,  1103, -1574,  -272, -1546,   406,     0, -2751,  1989 },
                      {-1062,   -86,   221,   136,   646, -1874,   -76, -1897,   238,     0, -2895,  2615 },
                      {-1232,   -25,   630,    39,   189, -2175,   118, -2247,    69,     0, -3040,  3240 },
                      {-1409,     0,   800,     0,     0, -2300,   310, -2357,     0,     0, -3100,  3389 },
                      {-1588,     0,   800,     0,     0, -2300,   494, -2296,     0,     0, -3100,  3205 },
                      {-1766,     0,   800,     0,     0, -2300,   678, -2236,     0,     0, -3100,  3021 },
                      {-1945,     0,   800,     0,     0, -2300,   862, -2176,     0,     0, -3100,  2837 },
                      {-2123,     0,   800,     0,     0, -2300,  1046, -2116,     0,     0, -3100,  2653 },
                      {-2301,     0,   800,     0,     0, -2300,  1229, -2055,     0,     0, -3100,  2470 },
                      {-2470,     0,   800,     0,     0, -2300,  1404, -1979,     0,     0, -3100,  2311 },
                      {-2502,     0,   800,     0,     0, -2300,  1448, -1773,     0,     0, -3100,  2429 },
                      {-2535,     0,   800,     0,     0, -2300,  1492, -1566,     0,     0, -3100,  2547 },
                      {-2568,     0,   800,     0,     0, -2300,  1536, -1360,     0,     0, -3100,  2665 },
                      {-2601,     0,   800,     0,     0, -2300,  1581, -1154,     0,     0, -3100,  2783 },
                      {-2633,     0,   800,     0,     0, -2300,  1625,  -948,     0,     0, -3100,  2900 },
                      {-2666,     0,   800,     0,     0, -2300,  1669,  -742,     0,     0, -3100,  3018 },
                      {-2699,     0,   800,     0,     0, -2300,  1720,  -600,     0,     0, -3100,  3123 },
                      {-2733,     0,   800,     0,     0, -2300,  1788,  -600,     0,     0, -3100,  3203 },
                      {-2767,     0,   800,     0,     0, -2300,  1856,  -600,     0,     0, -3100,  3283 },
                      {-2801,     0,   800,     0,     0, -2300,  1925,  -600,     0,     0, -3100,  3362 },
                      {-2835,     0,   800,     0,     0, -2300,  1993,  -600,     0,     0, -3100,  3442 },
                      {-2869,     0,   800,     0,     0, -2300,  2061,  -600,     0,     0, -3100,  3521 },
                      {-2903,     0,   800,     0,     0, -2300,  2129,  -600,     0,     0, -3100,  3601 },
                      {-2937,     0,   800,     0,     0, -2300,  2198,  -600,     0,     0, -3100,  3681 },
                      {-2971,     0,   800,     0,     0, -2300,  2266,  -600,     0,     0, -3100,  3760 },
                      {-2960,    50,   875,   150,    45, -2320,  2265,  -595,   -45,   150, -2680,  3745 },
                      {-2904,   150,  1025,   450,   135, -2360,  2195,  -585,  -135,   450, -1839,  3635 },
                      {-2849,   250,  1175,   750,   225, -2400,  2125,  -575,  -225,   750, -1000,  3525 },
                      {-2793,   350,  1325,  1050,   315, -2440,  2055,  -565,  -315,  1050,  -160,  3415 },
                      {-2738,   450,  1475,  1350,   405, -2480,  1985,  -555,  -405,  1350,   680,  3304 },
                      {-2682,   550,  1625,  1650,   495, -2520,  1914,  -545,  -495,  1650,  1520,  3195 },
                      {-2627,   650,  1775,  1950,   585, -2560,  1845,  -535,  -585,  1950,  2360,  3085 },
                      {-2571,   750,  1925,  2250,   675, -2600,  1775,  -525,  -675,  2250,  3200,  2975 },
                      {-2516,   850,  2075,  2550,   765, -2640,  1705,  -515,  -765,  2550,  4039,  2865 },
                      {-2460,   950,  2225,  2850,   854, -2680,  1635,  -505,  -854,  2850,  4880,  2755 },
                      {-2393,   934,  2300,  3000,   900, -2700,  1610,  -505,  -900,  3000,  5300,  2700 },
                      {-2313,   803,  2300,  3000,   900, -2700,  1630,  -515,  -900,  3000,  5300,  2700 },
                      {-2234,   672,  2300,  3000,   900, -2700,  1650,  -525,  -900,  3000,  5300,  2700 },
                      {-2154,   542,  2300,  3000,   900, -2700,  1670,  -535,  -900,  3000,  5300,  2700 },
                      {-2074,   411,  2300,  3000,   900, -2700,  1690,  -545,  -900,  3000,  5300,  2700 },
                      {-1995,   280,  2300,  3000,   900, -2700,  1710,  -555,  -900,  3000,  5300,  2700 },
                      {-1915,   149,  2300,  3000,   900, -2700,  1730,  -565,  -900,  3000,  5300,  2700 },
                      {-1836,    18,  2300,  3000,   900, -2700,  1750,  -575,  -900,  3000,  5300,  2700 },
                      {-1756,  -111,  2300,  3000,   900, -2700,  1770,  -585,  -900,  3000,  5300,  2700 },
                      {-1676,  -242,  2300,  3000,   900, -2700,  1790,  -595,  -900,  3000,  5300,  2700 },
                      {-1627,  -266,  2254,  2849,   759, -2649,  1704,  -594,  -985,  2889,  5224,  2574 },
                      {-1609,  -182,  2164,  2547,   477, -2549,  1513,  -584, -1156,  2668,  5073,  2323 },
                      {-1591,   -99,  2073,  2246,   196, -2448,  1322,  -574, -1327,  2447,  4923,  2071 },
                      {-1573,   -16,  1983,  1944,   -84, -2348,  1131,  -564, -1497,  2226,  4772,  1820 },
                      {-1555,    67,  1892,  1643,  -366, -2247,   940,  -554, -1668,  2005,  4621,  1569 },
                      {-1536,   150,  1802,  1341,  -647, -2147,   749,  -544, -1839,  1783,  4470,  1318 },
                      {-1518,   234,  1712,  1040,  -929, -2046,   558,  -534, -2010,  1562,  4320,  1066 },
                      {-1500,   317,  1621,   738, -1210, -1946,   367,  -524, -2181,  1341,  4169,   815 },
                      {-1482,   400,  1531,   437, -1491, -1845,   176,  -514, -2352,  1120,  4018,   564 },
                      {-1464,   484,  1440,   135, -1773, -1745,   -14,  -504, -2523,   899,  3867,   313 },
                      {-1342,   328,  1307,     0, -1979, -1356,  -179,  -466, -2375,   747,  3548,    34 },
                      {-1137,   -21,  1139,     0, -2123,  -730,  -323,  -406, -1966,   650,  3091,  -266 },
                      { -931,  -372,   970,     0, -2268,  -105,  -468,  -346, -1557,   554,  2634,  -566 },
                      { -726,  -722,   802,     0, -2412,   520,  -612,  -286, -1148,   458,  2177,  -867 },
                      { -520, -1073,   633,     0, -2556,  1145,  -756,  -226,  -739,   362,  1720, -1168 },
                      { -315, -1424,   465,     0, -2701,  1771,  -901,  -166,  -330,   265,  1263, -1468 },
                      { -109, -1774,   297,     0, -2845,  2396, -1045,  -106,    78,   169,   806, -1769 },
                      {   95, -2125,   128,     0, -2989,  3021, -1189,   -45,   487,    73,   349, -2070 }
};

int framesRight[numberOfFramesRight][numberOfJoints] = {
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 },
                      { -330,  -148,  -330,  -180,   400,  -340,   340,     0,     0,     0,   200,   256 },
                      { -660,  -296,  -660,  -360,   800,  -680,   680,     0,     0,     0,   400,   512 },
                      { -991,  -444,  -991,  -540,  1200, -1019,  1019,     0,     0,     0,   600,   768 },
                      {-1321,  -593, -1321,  -720,  1600, -1360,  1360,     0,     0,     0,   800,  1024 },
                      {-1651,  -741, -1651,  -900,  2000, -1700,  1700,     0,     0,     0,  1000,  1280 },
                      {-2022,  -741, -1701,  -560,  1839, -1739,  1920,   -20,     0,   460,  1320,  1544 },
                      {-2393,  -741, -1751,  -219,  1680, -1780,  2140,   -40,     0,   920,  1639,  1808 },
                      {-2764,  -741, -1800,   119,  1520, -1820,  2360,   -60,     0,  1380,  1960,  2072 },
                      {-3134,  -741, -1850,   460,  1360, -1860,  2580,   -80,     0,  1840,  2280,  2336 },
                      {-3505,  -741, -1900,   800,  1200, -1900,  2800,  -100,     0,  2300,  2600,  2600 },
                      {-3377,  -573, -1880,   480,  1140, -2039,  2520,   580,   220,  1760,  3000,  2420 },
                      {-3249,  -404, -1860,   159,  1080, -2180,  2240,  1260,   440,  1220,  3400,  2240 },
                      {-3121,  -235, -1839,  -159,  1019, -2320,  1960,  1939,   660,   680,  3800,  2060 },
                      {-2993,   -67, -1820,  -480,   960, -2460,  1679,  2620,   880,   139,  4200,  1880 },
                      {-2865,   101, -1800,  -800,   900, -2600,  1400,  3300,  1100,  -400,  4600,  1700 },
                      {-2651,  -299, -1800,  -577,  1202, -2600,  1328,  3193,  1100,  -400,  4444,  1700 },
                      {-2437,  -700, -1800,  -354,  1505, -2600,  1257,  3086,  1100,  -400,  4288,  1700 },
                      {-2223, -1101, -1800,  -131,  1808, -2600,  1186,  2979,  1100,  -400,  4132,  1700 },
                      {-1953, -1344, -1710,    40,  1943, -2470,  1073,  2750,  1045,  -380,  3809,  1614 },
                      {-1542, -1061, -1350,    32,  1534, -1950,   847,  2171,   825,  -300,  3007,  1275 },
                      {-1130,  -778,  -990,    23,  1125, -1430,   621,  1592,   605,  -220,  2205,   935 },
                      { -719,  -495,  -629,    14,   716,  -909,   395,  1013,   385,  -140,  1403,   594 },
                      { -308,  -212,  -270,     6,   306,  -390,   169,   434,   165,   -60,   601,   255 }
};

int framesNeutral[numberOfFramesNeutral][numberOfJoints] = {
                      { -245, -2238,   145,     0, -2975,  1056,  -985,  1085,   446,    83,   395,  -2040 },
                      { -184, -1679,   109,     0, -2231,   792,  -739,   814,   335,    62,   296,  -1530 },
                      { -123, -1119,    73,     0, -1488,   528,  -493,   543,   223,    42,   198,  -1020 },
                      {  -61,  -560,    36,     0,  -744,   264,  -246,   271,   112,    21,    99,   -510 },
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,      0 }
};

int servoCalibrations[numberOfJoints][3] = {
                      {691, 29, -404}, 
                      {-407, -507, -973}, 
                      {100, -700, -1200}, 
                      {600, 100, -300}, 
                      {300, -200, -800}, 
                      {300, -100, -266}, 
                      {500, 0, -335}, 
                      {0, -300, -500}, 
                      {600, -200, -600}, 
                      {400, 400, 100}, 
                      {500, -100, -270}, 
                      {100, -300, -541}
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Servo servos[numberOfServos];  // create servo object to control a servo 

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void loop()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // Distance detected by the ultrasonic sensor
  unsigned long cm = DetectDistance(pingPin);
  delay(50);
  // The robot will walk forward, but will turn right if there is an obstacle 30 cm or less in front of it
  if(cm >= 30)                  
    PlayFrames(numberOfFramesForward, playbackDelayForward);
  else
  {
    PlayFrames(numberOfFramesNeutral, playbackDelayNeutral);
    for (int i = 0; i < 4; i++) 
      PlayFrames(numberOfFramesRight, playbackDelayRight);                  
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void setup()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  //wait for a second to begin (keeps the communication line open in case a new program is being downloaded)
  delay(1000);    
  
  //start up the communication
  Serial.begin(9600);  
  
  //initialize the servos
  initializeServos();
  
  // Apply the servo calibrations to the joint positions.
  ApplyCalibration();

  delay(3000);
  
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
long DetectDistance(int pingPin)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // The PING))) is triggered by a HIGH pulse of 2 or more microseconds.
  // Give a short LOW pulse beforehand to ensure a clean HIGH pulse:
  pinMode(pingPin, OUTPUT);
  digitalWrite(pingPin, LOW);
  delayMicroseconds(2);
  digitalWrite(pingPin, HIGH);
  delayMicroseconds(5);
  digitalWrite(pingPin, LOW);

  // The same pin is used to read the signal from the PING))): a HIGH
  // pulse whose duration is the time (in microseconds) from the sending
  // of the ping to the reception of its echo off of an object.
  pinMode(pingPin, INPUT);
  long duration = pulseIn(pingPin, HIGH);

  // convert the time into a distance
  long cm = duration / ultrasonicConstant;
  return cm;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PlayFrames(int numberOfFrames, int playbackDelay)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // Angle value of the servo
  int value;
  // This for loop determines the animation frame the robot is playing through
  for (int framesRowNumber = 0; framesRowNumber < numberOfFrames; framesRowNumber++)
  {
    // This for loop adjusts the position of each servo
    for (int servo = 0; servo < numberOfServos; servo++)
    {   
        // each servo position is sent as a 2 byte value (high byte, low byte) integer (from -32,768 to 32,767)
        // this number is encoding the angle of the servo. The number is 100 * the servo angle.  This allows for the
        // storage of 2 significant digits(i.e. the value can be from -60.00 to 60.00 and every value in between).
        // Also remember that the servos have a range of 120 degrees. The angle is written in positions
        // which range from a minimum of 800 (-60 degrees) and go to a maximum of 2200 (60 degrees)
        
        // This branch determines whether or not the robot is walking forward or turning left based on
        // the parameters passed in the main loop    
        if (numberOfFrames == numberOfFramesForward)    value = framesForward[framesRowNumber][servo];
        else if (numberOfFrames == numberOfFramesRight) value = framesRight[framesRowNumber][servo];
        
        // flip for the left leg.
        if(servo >= numberOfServos/2) value = map(value, -6000,6000,6000,-6000);
        
        // tell servo to go to position in variable 'pos'
        servos[servo].write(map(value, -6000,6000,800,2200));   
        // This delay controls the delay between each servo being updated       
        delay(2);
    }
  // This delay controls the delay between each frame
  // This will vary based on the animation and may need to be changed if you make your own
  // animation with a different speed.
  delay(playbackDelay);
  }
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ApplyCalibration()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Apply the servo calibrations to each frame of the animation.
  // This is done before hand to keep from slowing down the playback.
  // The frames could also be stored with the calibrations already
  // applied, however leaving the calibration seperate allows other
  // ROFIs to use this same action with their own calibration.
  
  for(int f = 0; f < numberOfFramesForward; f++)
    for(int s = 0; s < numberOfServos; s++)    
      framesForward[f][s] = CorrectJointAngle(framesForward[f][s], s);
      
  for(int f = 0; f < numberOfFramesRight; f++)
    for(int s = 0; s < numberOfServos; s++)    
      framesRight[f][s] = CorrectJointAngle(framesRight[f][s], s);

  for(int f = 0; f < numberOfFramesNeutral; f++)
    for(int s = 0; s < numberOfServos; s++)    
      framesNeutral[f][s] = CorrectJointAngle(framesNeutral[f][s], s);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
double CorrectJointAngle(double inputAngle, int servo)
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
  // The input angle is what the angle should be.
  // The corrected angle is the angle that has to be sent to the servo to achieve the input angle.
  if (inputAngle > 0)
    // Do a two point calibration between the middle and high corrected values.
    return map(inputAngle, 0, 4500, 0 + servoCalibrations[servo][1], 4500 + servoCalibrations[servo][2]);
  else
    // Do a two point calibration between the low and middle corrected values.
    return map(inputAngle, -4500, 0, -4500 + servoCalibrations[servo][0], 0 + servoCalibrations[servo][1]);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void initializeServos()
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{   
  // Assign the correct pin to each servo.
  for(int s = 0; s < numberOfServos; s++)
    servos[s].attach(servoPins[s]);  
}
