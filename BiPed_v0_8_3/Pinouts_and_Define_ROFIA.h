/******************* Packet IDs ****************
 * source: Arxterra
 ***************************************************/
#define COMMAND_PACKET_ID    0xA5
#define TELEMETRY_PACKET_ID  0xCA

/******************* Robot Commands ****************
 * source: Arxterra
 ***************************************************/
// Arxterra Commands to Numeric Value Mapping
//               Data[0] =     CMD TYPE | Qual | Arguments
//                           bit  7654321   0    Bytes    N = 1 + bytes 
#define MOVE            0x01   // 0000000   1     4      
#define CAMERA_MOVE     0x02   // 0000001   0     4
#define CAMERA_HOME     0x04   // 0000010   0     0
#define CAMERA_RESET    0x05   // 0000010   1     0
#define READ_EEPROM     0x06   // 0000011   0     3 
#define WRITE_EEPROM    0x07   // 0000011   1     3 + b
#define SAFE_ROVER      0x08   // 0000100   0     0
#define SLEEP           0x0A   // 0000101   0     0
#define WAKEUP          0x0B   // 0000101   1     0
#define PING_INTERVAL   0x10   // 0001000   0
#define PING            0x11   // 0001000   1     1
#define HEADING         0x12   // 0001001   0
#define CURRENT_COORD   0x13   // 0001001   1         (float) Latitude, (float) Longitude
#define WAYPOINT_COORD  0x14   // 0001010   0
#define WAYPOINT_DELETE 0x16   // 0001011   0
#define WAYPOINT_MOVE   0x17   // 0001011   1
#define WAYPOINTS_OFF   0x18   // 0001100   0
#define WAYPOINTS_ON    0x19   // 0001100   1
#define WAYPOINTS_CLEAR 0x1A   // 0001101   0
// 0x40 - 0x5F  32 Custom Commands, 1 - 2 byte arguments

/******************* Robot Telemetry ***************
 * source: Arxterra
 ***************************************************/
// Telemetry Identifiers to Numeric Value Mapping 
#define  RANGE_LEFT_ID      0x04           // ultrasonic range 1 is left
#define  PAN_POSITION_ID    0x08           // originally defined as pan and tilt
#define  TILT_POSITION_ID   0x09           // not in original definition
#define  EEPROM_RESPONSE_ID 0x0A           // sent in response to EEPROM Read Command
#define  EMERGENCY_ID       0x0B
#define  COMMAND_ECHO_ID    0x0D
#define  EXCEPTION_ID       0x0E           // arduino error code exception
#define  PONG_ID            0x11
#define  ROUTE_STATUS_ID    0x12
#define  WAYPOINT_ARRIVE_ID 0x13

 /********************** Exception Codes ********************
 *   01    Start byte 0xA5 expected
 *   02    Packet length out of range 1 - 20
 *   03    LRC checksum error
 *   04    Undefined command decoder FSM state
 *   05    Array out of range i >= 23
 ************************************************************/
 
 /********************** Emergency Codes ********************
 *   0x0100    Watchdog timeout 0x01 with ancillary byte 0x00  
 ************************************************************/
#define WATCHDOG_TIMEOUT   0x0100

/**************** Robot Configuration **************
 * Set Rover, Pinouts, Connection Type, and Pinger *
 ***************************************************/
#define FALSE 0               // LOW
#define TRUE  1               // HIGH
#define BiPed TRUE
#define bluetooth FALSE       // Leonardo class rovers - Serial used for USB, Serial1 for bluetooth (i.e., USART)
#define debug  TRUE

// **** Make into an Object ****
// Heartbeat
unsigned long ping_interval = 10000;  // 10 seconds
unsigned long next_ping = millis() + ping_interval;

// note: #define is a text substitution pre-processor directive
// Pintout Defined for BiPed ROFIA
//    Poser action playback
//      This program was generated by Project Biped Poser to playback a specific action.
//    Use it as the starting point for your projects!
//
//    Copyright (C) 2012  Jonathan Dowdall, Project Biped (www.projectbiped.com)
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Constants
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const int led = 13;  // WARNING: assumes use of Arduino UNO not Sparfun Pro Micro
const int numberOfServos             = 12;    // the number of servos
const int numberOfJoints             = 12;
const int numberOfHeadServos         = 2;
const int numberOfFramesForward      = 126;   // Frames for moving forward
const int playbackDelayForward       = 10;    // Delay between the forward walk frames to achieve a stable speed
const int numberOfFramesNeutral      = 5;     // Frames for moving to home position
const int playbackDelayNeutral       = 20;    // Delay between the nuetral frames to achieve a stable speed
const int numberOfFramesRight        = 30;    // Delay between the right turn frames to achieve a stable speed
const int playbackDelayRight         = 25;    // Delay between the right turn frames to achieve a stable speed
const int numberOfFramesLeft         = 30;    // Frames for turning left
const int playbackDelayLeft          = 25;    // Delay between the left turn frames to achieve a stable speed
const int numberOfFramesLeftLean     = 6;     // Frames for balance the BiPed afer a force pushes left
const int numberOfFramesRightLean    = 7;     // Frames for balance the BiPed afer a force pushes right
const int playbackDelayBalance       = 15;    // Delay between the balance to the home position
const int ultrasonicConstant         = 58;    // Calculation for the distance detected by the ultrasonic sensor
                                              // Speed of sound is about 340 m/s -> 29 microseconds/cm, divide
                                              // the time taken for the ultrasonic sensor to detect by 2 to get
                                              // the time taken by the pulse to reach the object, then divide by
                                              // the ultrasonic constant to get the distance in centimeters.
const int pingPin                    = 4;     // Ultrasonic sensor pin
const int MPU                        =0x68;   // I2C address of the MPU-6050

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 　Mirror System
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Set Servo Default Limits       　　　　　　　*** In the future these will be read from EEPROM ***
const int servoMin       =  544;              // microseconds,   0 degress (Arduino default value)
const int servoMax       = 2400;              // microseconds, 180 degress (Arduino default value)
const int servoSpeed     =   15;              // milliseconds, experimentally determined
const int scanLeftLimit  =    0;              // degress
const int scanReset      =   90;              // degrees
const int scanHome       =   90;              // degrees
const int scanRightLimit =  180;              // degrees
const int tiltDownLimit  =  100;              // degress
const int tiltReset      =   90;              // degress
const int tiltHome       =  130;              // degress
const int tiltUpLimit    =  160;              // degress

// *** RESET VALUES *** 
int scanPosition;                             // change to int panPosition = panHome; if using commented out code in move_camera function
int tiltPosition;                             // change to int tiltPosition = tiltUpLimit; if using commented out code in move_camera function

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Balance System
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
int16_t stand;                                // Accelerometer Sensor Variable at Stand Position
const int leftLean                   = 1200;   // BiPed is pushed left by an external force
const int rightLean                  = -1200;  // BiPed is pushed right by an external force
const int debounceDelay              = 1200;   // Debounce Delay
unsigned long lastDebounceTime = 0;           // Time for the previous action take

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Action Frames
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Joints positions are in degrees * 100 (home position is 0 degrees)
/////////////////////////////////////////////
//JOINT INDEXES
//
//RIGHT LEG JOINTS
// 0 Right Ankle (roll)
// 1 Right Lower Leg 
// 2 Right Knee 
// 3 Right Middle Leg 
// 4 Right Upper Leg 
// 5 Right Hip (roll)
//LEFT LEG JOINTS
// 6 Left Ankle (roll)
// 7 Left Lower Leg 
// 8 Left Knee 
// 9 Left Middle Leg 
// 10 Left Upper Leg 
// 11 Left Hip (roll)
/////////////////////////////////////////////
int servoPins[numberOfServos] = {22, 24, 26, 28, 30, 32, 38, 40, 42, 44, 46, 48};  // the pin for each servo 

int framesForward[numberOfFramesForward][numberOfJoints] = {
                      {  707, -2990,     0,     0, -3100,  2000, -1800,     0,   800,     0,     0, -2300 },
                      { 1122, -2983,     0,     0, -3100,  2045, -1845,     0,   800,     0,     0, -2300 },
                      { 1537, -2975,     0,     0, -3100,  2091, -1891,     0,   800,     0,     0, -2300 },
                      { 1951, -2968,     0,     0, -3100,  2137, -1937,     0,   800,     0,     0, -2300 },
                      { 2366, -2961,     0,     0, -3100,  2183, -1983,     0,   800,     0,     0, -2300 },
                      { 2781, -2954,     0,     0, -3100,  2229, -2029,     0,   800,     0,     0, -2300 },
                      { 3196, -2946,     0,     0, -3100,  2275, -2075,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2166,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2298,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2431,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2563,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2696,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2829,     0,   800,     0,     0, -2300 },
                      { 3413, -2942,     0,     0, -3100,  2300, -2961,     0,   800,     0,     0, -2300 },
                      { 3417, -2620,     0,     0, -3100,  2412, -3056,     0,   800,     0,     0, -2300 },
                      { 3422, -2160,     0,     0, -3100,  2572, -3136,     0,   800,     0,     0, -2300 },
                      { 3426, -1699,     0,     0, -3100,  2732, -3215,     0,   800,     0,     0, -2300 },
                      { 3431, -1239,     0,     0, -3100,  2892, -3296,     0,   800,     0,     0, -2300 },
                      { 3436,  -778,     0,     0, -3100,  3052, -3376,     0,   800,     0,     0, -2300 },
                      { 3274, -1064,  -461,   358, -2757,  3084, -3384,    31,  1158,   461,   151, -2236 },
                      { 3040, -1670, -1121,   869, -2268,  3061, -3361,    77,  1669,  1121,   367, -2145 },
                      { 2806, -2275, -1780,  1381, -1779,  3038, -3338,   122,  2181,  1780,   583, -2054 },
                      { 2573, -2881, -2440,  1893, -1290,  3015, -3315,   168,  2693,  2440,   799, -1963 },
                      { 2339, -3486, -3099,  2405,  -801,  2993, -3293,   213,  3205,  3099,  1015, -1872 },
                      { 2105, -4092, -3759,  2916,  -312,  2970, -3270,   259,  3716,  3759,  1231, -1781 },
                      { 1871, -4698, -4418,  3428,   176,  2947, -3247,   304,  4228,  4418,  1447, -1690 },
                      { 1637, -5303, -5078,  3940,   665,  2924, -3224,   350,  4740,  5078,  1663, -1599 },
                      { 1403, -5909, -5738,  4451,  1154,  2902, -3202,   395,  5251,  5738,  1879, -1508 },
                      { 1469, -5539, -5359,  4365,  1569,  2882, -3218,   400,  5030,  5548,  1810, -1607 },
                      { 1566, -5064, -4869,  4215,  1979,  2862, -3238,   400,  4730,  5268,  1710, -1728 },
                      { 1663, -4590, -4379,  4065,  2389,  2842, -3258,   400,  4430,  4988,  1610, -1848 },
                      { 1760, -4115, -3889,  3915,  2799,  2822, -3278,   400,  4130,  4708,  1510, -1968 },
                      { 1857, -3641, -3399,  3765,  3209,  2802, -3297,   400,  3829,  4428,  1410, -2088 },
                      { 1954, -3167, -2909,  3615,  3619,  2782, -3318,   400,  3529,  4148,  1310, -2208 },
                      { 2051, -2692, -2419,  3465,  4029,  2762, -3338,   400,  3229,  3868,  1210, -2328 },
                      { 2148, -2218, -1929,  3315,  4439,  2742, -3358,   400,  2929,  3587,  1110, -2448 },
                      { 2245, -1743, -1439,  3165,  4849,  2722, -3378,   400,  2630,  3308,  1010, -2568 },
                      { 2342, -1269,  -949,  3015,  5259,  2702, -3397,   400,  2330,  3028,   910, -2688 },
                      { 2282, -1096, -1098,  2730,  5336,  2646, -3310,   246,  2138,  2730,   720, -2763 },
                      { 2205,  -957, -1318,  2430,  5376,  2586, -3210,    77,  1957,  2430,   520, -2833 },
                      { 2128,  -818, -1538,  2130,  5416,  2526, -3110,   -92,  1778,  2130,   320, -2903 },
                      { 2051,  -679, -1757,  1829,  5456,  2466, -3010,  -263,  1598,  1829,   119, -2973 },
                      { 1974,  -540, -1978,  1530,  5496,  2406, -2910,  -433,  1418,  1530,   -80, -3043 },
                      { 1897,  -402, -2197,  1230,  5536,  2346, -2810,  -602,  1238,  1230,  -279, -3113 },
                      { 1820,  -263, -2418,   930,  5576,  2286, -2710,  -772,  1058,   930,  -479, -3183 },
                      { 1743,  -124, -2638,   629,  5616,  2226, -2610,  -943,   877,   629,  -680, -3253 },
                      { 1666,    14, -2858,   330,  5656,  2166, -2510, -1113,   698,   330,  -880, -3323 },
                      { 1589,   153, -3078,    30,  5696,  2106, -2410, -1282,   518,    30, -1080, -3393 },
                      { 1485,   106, -3055,    72,  5529,  1929, -2328, -1201,   581,     0, -1172, -3265 },
                      { 1377,    39, -3005,   152,  5339,  1739, -2248, -1091,   671,     0, -1252, -3115 },
                      { 1270,   -27, -2955,   231,  5149,  1549, -2168,  -981,   761,     0, -1332, -2965 },
                      { 1162,   -94, -2905,   312,  4959,  1359, -2088,  -871,   851,     0, -1412, -2815 },
                      { 1055,  -162, -2855,   392,  4769,  1169, -2007,  -761,   941,     0, -1492, -2665 },
                      {  947,  -229, -2805,   472,  4579,   979, -1928,  -651,  1030,     0, -1572, -2515 },
                      {  839,  -296, -2755,   552,  4389,   789, -1848,  -541,  1121,     0, -1652, -2365 },
                      {  732,  -364, -2705,   632,  4198,   598, -1768,  -430,  1211,     0, -1732, -2215 },
                      {  624,  -431, -2655,   712,  4009,   409, -1688,  -320,  1301,     0, -1812, -2065 },
                      {  517,  -498, -2605,   792,  3819,   219, -1607,  -210,  1391,     0, -1892, -1914 },
                      {  256,  -450, -2231,   713,  3388,   -70, -1351,  -437,  1248,     0, -2029, -1477 },
                      {  -20,  -390, -1823,   617,  2931,  -371, -1074,  -701,  1080,     0, -2174, -1008 },
                      { -297,  -329, -1414,   520,  2474,  -671,  -797,  -964,   911,     0, -2318,  -539 },
                      { -575,  -268, -1005,   424,  2017,  -972,  -521, -1228,   743,     0, -2462,   -70 },
                      { -852,  -207,  -596,   328,  1560, -1273,  -244, -1492,   574,     0, -2607,   398 },
                      {-1130,  -146,  -187,   232,  1103, -1574,    32, -1756,   406,     0, -2751,   867 },
                      {-1407,   -86,   221,   136,   646, -1874,   308, -2020,   238,     0, -2895,  1336 },
                      {-1685,   -25,   630,    39,   189, -2175,   585, -2283,    69,     0, -3040,  1805 },
                      {-1915,     0,   800,     0,     0, -2300,   865, -2274,     0,     0, -3100,  2027 },
                      {-2107,     0,   800,     0,     0, -2300,  1141, -2076,     0,     0, -3100,  2073 },
                      {-2300,     0,   800,     0,     0, -2300,  1417, -1877,     0,     0, -3100,  2119 },
                      {-2492,     0,   800,     0,     0, -2300,  1693, -1679,     0,     0, -3100,  2165 },
                      {-2684,     0,   800,     0,     0, -2300,  1969, -1481,     0,     0, -3100,  2211 },
                      {-2877,     0,   800,     0,     0, -2300,  2244, -1283,     0,     0, -3100,  2257 },
                      {-3060,     0,   800,     0,     0, -2300,  2510, -1101,     0,     0, -3100,  2311 },
                      {-3110,     0,   800,     0,     0, -2300,  2613, -1116,     0,     0, -3100,  2429 },
                      {-3161,     0,   800,     0,     0, -2300,  2716, -1130,     0,     0, -3100,  2547 },
                      {-3212,     0,   800,     0,     0, -2300,  2819, -1145,     0,     0, -3100,  2665 },
                      {-3263,     0,   800,     0,     0, -2300,  2922, -1160,     0,     0, -3100,  2783 },
                      {-3314,     0,   800,     0,     0, -2300,  3025, -1175,     0,     0, -3100,  2900 },
                      {-3364,     0,   800,     0,     0, -2300,  3128, -1189,     0,     0, -3100,  3018 },
                      {-3393,    15,   953,   197,    64, -2272,  3135, -1360,  -197,   153, -2953,  3093 },
                      {-3370,    68,  1465,   857,   280, -2181,  2919, -1894,  -857,   665, -2464,  3070 },
                      {-3347,   120,  1976,  1516,   496, -2090,  2703, -2429, -1516,  1176, -1975,  3047 },
                      {-3324,   173,  2488,  2176,   712, -1999,  2487, -2963, -2176,  1688, -1486,  3024 },
                      {-3302,   225,  3000,  2836,   929, -1908,  2270, -3498, -2836,  2200,  -997,  3002 },
                      {-3279,   278,  3512,  3495,  1145, -1817,  2054, -4032, -3495,  2712,  -508,  2979 },
                      {-3256,   330,  4023,  4155,  1361, -1726,  1838, -4567, -4155,  3223,   -19,  2956 },
                      {-3233,   383,  4535,  4814,  1577, -1635,  1622, -5101, -4814,  3735,   469,  2933 },
                      {-3211,   435,  5047,  5474,  1793, -1544,  1406, -5636, -5474,  4247,   958,  2911 },
                      {-3210,   460,  5150,  5660,  1850, -1560,  1380, -5620, -5555,  4425,  1405,  2890 },
                      {-3229,   457,  4850,  5380,  1750, -1680,  1540, -5060, -5065,  4275,  1814,  2870 },
                      {-3250,   454,  4550,  5100,  1650, -1800,  1700, -4500, -4575,  4125,  2225,  2850 },
                      {-3270,   450,  4250,  4820,  1550, -1920,  1860, -3940, -4085,  3975,  2635,  2830 },
                      {-3290,   447,  3950,  4540,  1450, -2039,  2020, -3379, -3595,  3825,  3045,  2810 },
                      {-3310,   444,  3650,  4259,  1350, -2160,  2180, -2819, -3104,  3675,  3454,  2790 },
                      {-3329,   441,  3350,  3979,  1250, -2280,  2340, -2260, -2615,  3525,  3865,  2770 },
                      {-3350,   438,  3050,  3700,  1150, -2400,  2500, -1700, -2125,  3375,  4275,  2750 },
                      {-3370,   435,  2750,  3420,  1050, -2520,  2660, -1139, -1635,  3225,  4685,  2730 },
                      {-3390,   432,  2450,  3140,   950, -2640,  2820,  -580, -1145,  3075,  5095,  2710 },
                      {-3350,   344,  2210,  2850,   799, -2735,  2831,  -306, -1010,  2850,  5320,  2670 },
                      {-3250,   171,  2029,  2549,   599, -2805,  2693,  -319, -1230,  2549,  5360,  2610 },
                      {-3149,    -1,  1849,  2249,   399, -2875,  2556,  -332, -1450,  2249,  5400,  2550 },
                      {-3049,  -174,  1669,  1949,   199, -2945,  2418,  -345, -1670,  1949,  5440,  2490 },
                      {-2949,  -347,  1489,  1649,     0, -3015,  2281,  -358, -1890,  1649,  5480,  2429 },
                      {-2850,  -520,  1310,  1350,  -199, -3085,  2143,  -371, -2109,  1350,  5520,  2370 },
                      {-2750,  -694,  1130,  1050,  -399, -3154,  2006,  -384, -2329,  1050,  5560,  2310 },
                      {-2650,  -867,   950,   750,  -599, -3225,  1868,  -397, -2549,   750,  5600,  2250 },
                      {-2550, -1040,   770,   450,  -799, -3295,  1731,  -410, -2769,   450,  5640,  2190 },
                      {-2450, -1213,   590,   150, -1000, -3365,  1593,  -423, -2990,   150,  5680,  2130 },
                      {-2340, -1280,   545,     0, -1140, -3325,  1458,  -433, -3075,    40,  5605,  2005 },
                      {-2220, -1240,   635,     0, -1220, -3175,  1326,  -440, -3025,   120,  5415,  1814 },
                      {-2100, -1200,   725,     0, -1300, -3025,  1193,  -447, -2975,   200,  5225,  1625 },
                      {-1980, -1160,   815,     0, -1380, -2875,  1061,  -454, -2925,   280,  5035,  1435 },
                      {-1860, -1120,   905,     0, -1460, -2725,   928,  -461, -2875,   360,  4845,  1245 },
                      {-1739, -1080,   994,     0, -1540, -2575,   796,  -468, -2825,   440,  4655,  1055 },
                      {-1620, -1040,  1085,     0, -1620, -2425,   663,  -475, -2775,   520,  4465,   865 },
                      {-1500, -1000,  1175,     0, -1700, -2275,   531,  -482, -2725,   600,  4275,   675 },
                      {-1380,  -960,  1264,     0, -1780, -2125,   398,  -489, -2675,   680,  4085,   485 },
                      {-1260,  -919,  1355,     0, -1860, -1975,   266,  -496, -2625,   760,  3895,   294 },
                      {-1085, -1025,  1315,     0, -1972, -1665,    79,  -469, -2395,   751,  3571,    49 },
                      { -855, -1277,  1147,     0, -2116, -1196,  -160,  -409, -1986,   655,  3114,  -251 },
                      { -626, -1528,   979,     0, -2260,  -727,  -401,  -349, -1577,   559,  2657,  -551 },
                      { -396, -1779,   810,     0, -2405,  -258,  -641,  -289, -1168,   463,  2200,  -852 },
                      { -167, -2031,   642,     0, -2549,   210,  -882,  -229,  -759,   367,  1743, -1153 },
                      {   62, -2282,   473,     0, -2693,   679, -1123,  -169,  -350,   270,  1286, -1453 },
                      {  291, -2534,   305,     0, -2838,  1148, -1363,  -109,    58,   174,   829, -1754 },
                      {  520, -2785,   137,     0, -2982,  1617, -1604,   -48,   466,    78,   372, -2055 }
};

int framesNeutral[numberOfFramesNeutral][numberOfJoints] = {
                      { -245, -2238,   145,     0, -2975,  1056,  -985,  1085,   446,    83,   395,  -2040 },
                      { -184, -1679,   109,     0, -2231,   792,  -739,   814,   335,    62,   296,  -1530 },
                      { -123, -1119,    73,     0, -1488,   528,  -493,   543,   223,    42,   198,  -1020 },
                      {  -61,  -560,    36,     0,  -744,   264,  -246,   271,   112,    21,    99,   -510 },
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,      0 }
};

int framesRight[numberOfFramesRight][numberOfJoints] = {
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 },
                      { -323,  -148,  -320,  -180,   400,  -340,   340,     0,     0,     0,   200,   240 },
                      { -646,  -296,  -640,  -360,   800,  -680,   680,     0,     0,     0,   400,   480 },
                      { -970,  -444,  -960,  -540,  1200, -1019,  1019,     0,     0,     0,   600,   719 },
                      {-1293,  -593, -1280,  -720,  1600, -1360,  1360,     0,     0,     0,   800,   960 },
                      {-1616,  -741, -1600,  -900,  2000, -1700,  1700,     0,     0,     0,  1000,  1200 },
                      {-2001,  -741, -1660,  -560,  1839, -1760,  1920,   -20,     0,   460,  1120,  1480 },
                      {-2385,  -741, -1720,  -219,  1680, -1820,  2140,   -40,     0,   920,  1240,  1760 },
                      {-2769,  -741, -1780,   119,  1520, -1880,  2360,   -60,     0,  1380,  1360,  2039 },
                      {-3153,  -741, -1839,   460,  1360, -1939,  2580,   -80,     0,  1840,  1480,  2320 },
                      {-3538,  -741, -1900,   800,  1200, -2000,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3538,  -741, -1900,   800,  1200, -1900,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3538,  -741, -1900,   800,  1200, -1800,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3538,  -741, -1900,   800,  1200, -1700,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3538,  -741, -1900,   800,  1200, -1600,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3538,  -741, -1900,   800,  1200, -1500,  2800,  -100,     0,  2300,  1600,  2600 },
                      {-3403,  -573, -1880,   480,  1140, -1720,  2520,   580,   220,  1760,  1900,  2420 },
                      {-3268,  -404, -1860,   159,  1080, -1939,  2240,  1260,   440,  1220,  2200,  2240 },
                      {-3133,  -235, -1839,  -159,  1019, -2160,  1960,  1939,   660,   680,  2500,  2060 },
                      {-2998,   -67, -1820,  -480,   960, -2380,  1679,  2620,   880,   139,  2800,  1880 },
                      {-2864,   101, -1800,  -800,   900, -2600,  1400,  3300,  1100,  -400,  3100,  1700 },
                      {-2708,  -215, -1800,  -640,   800, -2600,  1340,  3379,  1100,  -400,  3020,  1700 },
                      {-2553,  -532, -1800,  -480,   700, -2600,  1280,  3460,  1100,  -400,  2940,  1700 },
                      {-2398,  -849, -1800,  -320,   600, -2600,  1220,  3540,  1100,  -400,  2860,  1700 },
                      {-2243, -1166, -1800,  -159,   500, -2600,  1160,  3620,  1100,  -400,  2780,  1700 },
                      {-2088, -1483, -1800,     0,   400, -2600,  1100,  3700,  1100,  -400,  2700,  1700 },
                      {-1671, -1186, -1440,     0,   320, -2080,   880,  2960,   880,  -320,  2160,  1360 },
                      {-1253,  -889, -1080,     0,   240, -1560,   660,  2220,   660,  -240,  1620,  1019 },
                      { -835,  -593,  -720,     0,   160, -1040,   440,  1480,   440,  -160,  1080,   680 },
                      { -417,  -296,  -359,     0,    79,  -519,   219,   739,   219,   -79,   539,   339 }
};

int framesLeft[numberOfFramesLeft][numberOfJoints] = {
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0 },
                      {  340,     0,     0,     0,   200,   240,  -520,  -140,  -320,  -180,   400,  -340 },
                      {  680,     0,     0,     0,   400,   480, -1040,  -280,  -640,  -360,   800,  -680 },
                      { 1019,     0,     0,     0,   600,   719, -1560,  -420,  -960,  -540,  1200, -1019 },
                      { 1360,     0,     0,     0,   800,   960, -2080,  -560, -1280,  -720,  1600, -1360 },
                      { 1700,     0,     0,     0,  1000,  1200, -2600,  -700, -1600,  -900,  2000, -1700 },
                      { 1920,  -188,     0,   340,  1120,  1480, -2800,  -700, -1460,  -720,  1720, -1760 },
                      { 2140,  -377,     0,   680,  1240,  1760, -3000,  -700, -1320,  -540,  1439, -1820 },
                      { 2360,  -566,     0,  1019,  1360,  2039, -3200,  -700, -1180,  -360,  1160, -1880 },
                      { 2580,  -755,     0,  1360,  1480,  2320, -3400,  -700, -1039,  -179,   879, -1939 },
                      { 2800,  -944,     0,  1700,  1600,  2600, -3600,  -700,  -900,     0,   600, -2000 },
                      { 2800, -1146,     0,  1860,  1600,  2600, -3579,  -620,  -880,   120,   700, -1900 },
                      { 2800, -1348,     0,  2020,  1600,  2600, -3560,  -540,  -860,   240,   800, -1800 },
                      { 2800, -1550,     0,  2180,  1600,  2600, -3540,  -459,  -840,   359,   900, -1700 },
                      { 2800, -1752,     0,  2340,  1600,  2600, -3520,  -380,  -819,   480,  1000, -1600 },
                      { 2800, -1953,     0,  2500,  1600,  2600, -3500,  -300,  -800,   600,  1100, -1500 },
                      { 2520,  -903,   220,  1920,  1900,  2420, -3372,  -219, -1000,   320,  1060, -1720 },
                      { 2240,   147,   440,  1339,  2200,  2240, -3245,  -139, -1200,    39,  1019, -1939 },
                      { 1960,  1198,   660,   760,  2500,  2060, -3118,   -59, -1400,  -240,   980, -2160 },
                      { 1679,  2249,   880,   179,  2800,  1880, -2991,    20, -1600,  -520,   940, -2380 },
                      { 1400,  3299,  1100,  -400,  3100,  1700, -2864,   101, -1800,  -800,   900, -2600 },
                      { 1340,  3379,  1100,  -400,  3020,  1700, -2708,  -215, -1800,  -640,   800, -2600 },
                      { 1280,  3459,  1100,  -400,  2940,  1700, -2553,  -532, -1800,  -480,   700, -2600 },
                      { 1220,  3540,  1100,  -400,  2860,  1700, -2398,  -849, -1800,  -320,   600, -2600 },
                      { 1160,  3619,  1100,  -400,  2780,  1700, -2243, -1166, -1800,  -159,   500, -2600 },
                      { 1100,  3700,  1100,  -400,  2700,  1700, -2088, -1483, -1800,     0,   400, -2600 },
                      {  880,  2960,   880,  -320,  2160,  1360, -1671, -1186, -1440,     0,   320, -2080 },
                      {  660,  2220,   660,  -240,  1620,  1019, -1253,  -889, -1080,     0,   240, -1560 },
                      {  440,  1480,   440,  -160,  1080,   680,  -835,  -593,  -720,     0,   160, -1040 },
                      {  219,   739,   219,   -79,   539,   339,  -417,  -296,  -359,     0,    79,  -519 }
};

int framesLeftLean[numberOfFramesLeftLean][numberOfJoints] = {
                      { 1011,     0,     0,     0,     0,  1651, -1584,     0,     0,     0,     0, -1382  },
                      {  809,     0,     0,     0,     0,  1321, -1267,     0,     0,     0,     0, -1106  },
                      {  607,     0,     0,     0,     0,   991,  -950,     0,     0,     0,     0,  -830  },
                      {  405,     0,     0,     0,     0,   661,  -633,     0,     0,     0,     0,  -554  },
                      {  203,     0,     0,     0,     0,   331,  -316,     0,     0,     0,     0,  -278  },
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0  }
};


int framesRightLean[numberOfFramesRightLean][numberOfJoints] = {
                      {-1584,     0,     0,     0,     0, -1382,  1011,     0,     0,     0,     0,  1651  },
                      {-1267,     0,     0,     0,     0, -1106,   809,     0,     0,     0,     0,  1321  },
                      { -950,     0,     0,     0,     0,  -830,   607,     0,     0,     0,     0,   991  },
                      { -633,     0,     0,     0,     0,  -554,   405,     0,     0,     0,     0,   661  },
                      { -316,     0,     0,     0,     0,  -278,   203,     0,     0,     0,     0,   331  },
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0  },
                      {    0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,     0  }
};

int servoCalibrations[numberOfJoints][3] = {
                      {2279, 2063, 1500}, 
                      {858, 238, 439}, 
                      {-500, -1100, -1400}, 
                      {0, 0, -100}, 
                      {-600, -700, -800}, 
                      {-1000, -1200, -1500}, 
                      {2200, 1700, 1500}, 
                      {-300, 0, -570}, 
                      {500, 200, -218}, 
                      {200, 300, 244}, 
                      {1100, 1000, 253}, 
                      {1200, 700, 200}
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Variables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Servo servos[numberOfServos];       // create servo object to control a servo 
Servo scanServo;                    // Head servo for scanning
Servo tiltServo;                    // Head servo for tilting


/******************* Robot Sensors ****************
* source: Found in CommunicationRobotPilot Folder
 ***************************************************/
uint16_t sensor_value;              // Used for Current Sensor
                                    // last sensor value sent to control panel
                                    // used for comparison with current sensor value
                                    // if different data packet is sent to the control panel
uint16_t  positionScan=0;
uint16_t  positionTilt=0;

/**************** Global Variables ****************
 * source: Found in CommunicationRobotPilot Folder  *
 ***************************************************/
const int16_t FLAG = -128;            // value returned by readFuelGauge when called
                                   // by sendDataon undervoltage condition
// Timer Variable
unsigned long timer;               // unsigned 32-bit
